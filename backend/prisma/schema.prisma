// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRATOR
  DENTIST
  RECEPTIONIST
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  CONSULTATION
  CLEANING
  EXTRACTION
  FILLING
  ROOT_CANAL
  CROWN
  BRIDGE
  IMPLANT
  ORTHODONTICS
  EMERGENCY
  FOLLOWUP
}

enum TreatmentPlanStatus {
  PROPOSED
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  INSURANCE
  CHECK
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      UserRole
  firstName String
  lastName  String
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  appointmentsAsDentist Appointment[]    @relation("DentistAppointments")
  treatmentPlans        TreatmentPlan[]
  treatmentRecords      TreatmentRecord[]
  createdInvoices       Invoice[]        @relation("InvoiceCreatedBy")

  @@map("users")
}

model Patient {
  id                String    @id @default(cuid())
  firstName         String
  lastName          String
  dateOfBirth       DateTime
  gender            Gender
  phone             String
  email             String?
  address           String
  city              String
  state             String?
  zipCode           String
  emergencyContact  String
  emergencyPhone    String
  medicalHistory    String?
  dentalHistory     String?
  allergies         String?
  medications       String?
  insuranceProvider String?
  insuranceNumber   String?
  notes             String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  appointments     Appointment[]
  treatmentPlans   TreatmentPlan[]
  treatmentRecords TreatmentRecord[]
  invoices         Invoice[]
  dentalCharts     DentalChart[]
  patientFiles     PatientFile[]

  @@map("patients")
}

model Appointment {
  id        String            @id @default(cuid())
  patientId String
  dentistId String
  dateTime  DateTime
  duration  Int               @default(60) // in minutes
  type      AppointmentType
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?
  reason    String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  patient          Patient           @relation(fields: [patientId], references: [id])
  dentist          User              @relation("DentistAppointments", fields: [dentistId], references: [id])
  treatmentRecords TreatmentRecord[]

  @@map("appointments")
}

model TreatmentPlan {
  id                String              @id @default(cuid())
  patientId         String
  dentistId         String
  diagnosis         String
  proposedProcedures String
  estimatedCost     Decimal             @db.Decimal(10, 2)
  status            TreatmentPlanStatus @default(PROPOSED)
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  patient          Patient           @relation(fields: [patientId], references: [id])
  dentist          User              @relation(fields: [dentistId], references: [id])
  treatmentRecords TreatmentRecord[]

  @@map("treatment_plans")
}

model TreatmentRecord {
  id               String   @id @default(cuid())
  patientId        String
  appointmentId    String?
  dentistId        String
  treatmentPlanId  String?
  date             DateTime
  procedurePerformed String
  notes            String?
  cost             Decimal  @db.Decimal(10, 2)
  duration         Int?     // in minutes
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  patient       Patient        @relation(fields: [patientId], references: [id])
  appointment   Appointment?   @relation(fields: [appointmentId], references: [id])
  dentist       User           @relation(fields: [dentistId], references: [id])
  treatmentPlan TreatmentPlan? @relation(fields: [treatmentPlanId], references: [id])

  @@map("treatment_records")
}

model DentalChart {
  id        String   @id @default(cuid())
  patientId String
  toothNumber Int
  condition String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patient Patient @relation(fields: [patientId], references: [id])

  @@unique([patientId, toothNumber])
  @@map("dental_charts")
}

model Invoice {
  id                String        @id @default(cuid())
  invoiceNumber     String        @unique
  patientId         String
  dateIssued        DateTime      @default(now())
  dueDate           DateTime
  totalAmount       Decimal       @db.Decimal(10, 2)
  amountPaid        Decimal       @default(0) @db.Decimal(10, 2)
  outstandingBalance Decimal      @db.Decimal(10, 2)
  paymentStatus     PaymentStatus @default(PENDING)
  notes             String?
  createdById       String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  patient   Patient     @relation(fields: [patientId], references: [id])
  createdBy User        @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  payments  Payment[]
  items     InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int     @default(1)
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Payment {
  id            String        @id @default(cuid())
  invoiceId     String
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  paymentDate   DateTime      @default(now())
  reference     String?
  notes         String?
  createdAt     DateTime      @default(now())

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model InventoryItem {
  id           String   @id @default(cuid())
  name         String
  description  String?
  category     String?
  quantityInStock Int   @default(0)
  unitCost     Decimal  @db.Decimal(10, 2)
  reorderLevel Int      @default(10)
  supplierId   String?
  sku          String?  @unique
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  supplier          Supplier?           @relation(fields: [supplierId], references: [id])
  stockMovements    StockMovement[]
  lowStockAlerts    LowStockAlert[]

  @@map("inventory_items")
}

model Supplier {
  id            String   @id @default(cuid())
  name          String
  contactPerson String?
  phone         String?
  email         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  notes         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  inventoryItems InventoryItem[]

  @@map("suppliers")
}

model StockMovement {
  id              String   @id @default(cuid())
  inventoryItemId String
  type            String   // 'IN' for stock received, 'OUT' for stock used
  quantity        Int
  reference       String?  // Purchase order, treatment record, etc.
  notes           String?
  createdAt       DateTime @default(now())

  // Relations
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id])

  @@map("stock_movements")
}

model LowStockAlert {
  id              String   @id @default(cuid())
  inventoryItemId String
  currentStock    Int
  reorderLevel    Int
  isResolved      Boolean  @default(false)
  createdAt       DateTime @default(now())
  resolvedAt      DateTime?

  // Relations
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id])

  @@map("low_stock_alerts")
}

model PatientFile {
  id           String   @id @default(cuid())
  patientId    String
  fileName     String
  originalName String
  fileType     String
  fileSize     Int
  filePath     String
  description  String?
  uploadedAt   DateTime @default(now())

  // Relations
  patient Patient @relation(fields: [patientId], references: [id])

  @@map("patient_files")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}